{"version":3,"sources":["Heading.js","ButtonsPanel.js","CounterDisplay.js","Step.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","className","classValue","text","ButtonsPanel","console","log","onClick","changeValue","resetValue","counterDisplay","counterCurrentValue","Step","type","min","value","stepValue","onChange","updateStepTyping","changeValueWithStep","Counter","addOne","setState","prevState","counterValue","addStep","event","parseInt","state","preventDefault","updateStep","target","reset","resetBool","initValue","isNaN","this","CounterDisplay","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAMeA,G,YAJC,SAAAC,GAChB,OAAQ,wBAAIC,UAAWD,EAAME,YAAaF,EAAMG,Q,mCCYjCC,EAbM,SAAAJ,GAGjB,OADAK,QAAQC,IAAIN,GAER,yBAAKC,UAAU,iBAEX,4BAAQM,QAASP,EAAMQ,aAAvB,SACA,4BAAQD,QAAS,kBAAIP,EAAMS,YAAW,KAAtC,SACA,4BAAQF,QAAS,kBAAIP,EAAMS,YAAW,KAAtC,WCJGC,EAJQ,SAAAV,GACnB,OAAQ,6CAAmBA,EAAMW,sBCatBC,EAdF,SAAAZ,GAGT,OACI,yBAAKC,UAAU,QACX,8BACA,2BAAOY,KAAK,SAASC,IAAI,IAAIC,MAAOf,EAAMgB,UAAWC,SAAUjB,EAAMkB,mBACrE,6BACA,4BAAQX,QAASP,EAAMmB,qBAAvB,kBAAuDnB,EAAMgB,cCqD1DI,E,YAxDX,WAAapB,GAAQ,IAAD,uBAChB,4CAAMA,KAgBVqB,OAAS,WACL,EAAKC,UAAS,SAAAC,GACV,MAAO,CAACC,aAAcD,EAAUC,aAAe,OAnBnC,EAuBpBC,QAAU,SAACC,GACP,EAAKJ,UAAS,SAAAC,GACV,MAAO,CAACC,aAAcD,EAAUC,aAAeG,SAAS,EAAKC,MAAMZ,eAEvEU,EAAMG,kBA3BU,EA8BpBC,WAAa,SAAAJ,GACTrB,QAAQC,IAAIoB,EAAMK,OAAOhB,OACzB,EAAKO,SAAS,CAACN,UAAWU,EAAMK,OAAOhB,SAhCvB,EAmCpBiB,MAAQ,SAAAC,GACDA,EACC,EAAKX,SAAS,CAACE,aAAc,IAE7B,EAAKF,SAAS,CAACE,aAAc,EAAKxB,MAAMkC,aApC5C,IAAIA,EAAY,EAHA,OAMZC,MAAM,EAAKnC,MAAMkC,aACjBA,EAAYP,SAAS,EAAK3B,MAAMkC,YAGpC,EAAKN,MAAQ,CACTJ,aAAcU,EACdlB,UAAW,IAZC,E,sEA8ChB,OADAX,QAAQC,IAAI8B,KAAKpC,OAEb,yBAAKC,UAAU,WACX,kBAACoC,EAAD,CAAgB1B,oBAAqByB,KAAKR,MAAMJ,eAChD,kBAAC,EAAD,CAAchB,YAAa4B,KAAKf,OAAQZ,WAAY2B,KAAKJ,QACzD,kBAAC,EAAD,CAAMd,iBAAkBkB,KAAKN,WAAYX,oBAAqBiB,KAAKX,QAAST,UAAWoB,KAAKR,MAAMZ,iB,GApD5FsB,aCWPC,MAXf,WACE,OACE,yBAAKtC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAASE,KAAM,kBAAmBD,WAAW,kBAE/C,kBAAC,EAAD,QCCcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ad8d0d7f.chunk.js","sourcesContent":["import React from 'react'; // staly element komponentu reactowego\r\n\r\nconst Heading = props => { // konwencja: nazwa komponentu odpowiada nazwie pliku (Heading)\r\nreturn (<h1 className={props.classValue}>{props.text}</h1>);\r\n}\r\n\r\nexport default Heading; // staly element komponentu reactowego","import React from 'react'; \r\n\r\nconst ButtonsPanel = props => { \r\n\r\n    console.log(props);\r\n    return (\r\n        <div className='buttons-panel'>\r\n            \r\n            <button onClick={props.changeValue} >Add 1</button>\r\n            <button onClick={()=>props.resetValue(true)}>Set 0</button>\r\n            <button onClick={()=>props.resetValue(false)}>Reset</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ButtonsPanel; \r\n\r\n","import React from 'react'; \r\n\r\nconst counterDisplay = props => { \r\n    return (<p>Stan licznika: {props.counterCurrentValue}</p>);\r\n}\r\n\r\nexport default counterDisplay; ","import React from 'react'; \r\n\r\nconst Step = props => { \r\n\r\n\r\n    return (\r\n        <div className='step'>\r\n            <form>\r\n            <input type=\"number\" min=\"1\" value={props.stepValue} onChange={props.updateStepTyping}></input>\r\n            <br></br>\r\n            <button onClick={props.changeValueWithStep}>ZwiÄ™ksz o {props.stepValue}</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Step; ","import React, { Component } from 'react';\r\nimport ButtonsPanel from './ButtonsPanel';\r\nimport CounterDisplay from './CounterDisplay';\r\nimport Step from './Step';\r\n\r\nclass Counter extends Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        let initValue = 0;\r\n        let stepValue;\r\n\r\n        if(!isNaN(this.props.initValue)) {\r\n            initValue = parseInt(this.props.initValue);\r\n        }\r\n\r\n        this.state = {\r\n            counterValue: initValue,\r\n            stepValue: ''\r\n        };       \r\n\r\n    }\r\n\r\n    addOne = () => {\r\n        this.setState(prevState=>{\r\n            return({counterValue: prevState.counterValue + 1});\r\n        })\r\n    }\r\n\r\n    addStep = (event) => {\r\n        this.setState(prevState=>{\r\n            return({counterValue: prevState.counterValue + parseInt(this.state.stepValue)});\r\n        })\r\n        event.preventDefault();\r\n    }\r\n\r\n    updateStep = event => {\r\n        console.log(event.target.value);\r\n        this.setState({stepValue: event.target.value})\r\n    }\r\n    \r\n    reset = resetBool => {\r\n        if(resetBool) {\r\n            this.setState({counterValue: 0})\r\n        } else {\r\n            this.setState({counterValue: this.props.initValue})\r\n        }\r\n    }\r\n    \r\n    \r\n    render() {\r\n        console.log(this.props);\r\n        return(\r\n            <div className='counter'>\r\n                <CounterDisplay counterCurrentValue={this.state.counterValue}/>\r\n                <ButtonsPanel changeValue={this.addOne} resetValue={this.reset} />\r\n                <Step updateStepTyping={this.updateStep} changeValueWithStep={this.addStep} stepValue={this.state.stepValue}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport './App.css';\nimport Heading from './Heading';\nimport Counter from './Counter'\n\nfunction App() {\n  return (\n    <div className=\"App\"> \n      <header className=\"App-header\">\n        <Heading text={'Licznik w React'} classValue='main-heading' />\n      </header>\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}